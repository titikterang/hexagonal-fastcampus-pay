// Code generated by MockGen. DO NOT EDIT.
// Source: money.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	types "github.com/titikterang/hexagonal-fastcampus-pay/lib/types"
	money "google.golang.org/genproto/googleapis/type/money"
)

// MockMoneyServiceAdapter is a mock of MoneyServiceAdapter interface.
type MockMoneyServiceAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockMoneyServiceAdapterMockRecorder
}

// MockMoneyServiceAdapterMockRecorder is the mock recorder for MockMoneyServiceAdapter.
type MockMoneyServiceAdapterMockRecorder struct {
	mock *MockMoneyServiceAdapter
}

// NewMockMoneyServiceAdapter creates a new mock instance.
func NewMockMoneyServiceAdapter(ctrl *gomock.Controller) *MockMoneyServiceAdapter {
	mock := &MockMoneyServiceAdapter{ctrl: ctrl}
	mock.recorder = &MockMoneyServiceAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoneyServiceAdapter) EXPECT() *MockMoneyServiceAdapterMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockMoneyServiceAdapter) GetUserBalance(ctx context.Context, accountNumber string) (*money.Money, decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, accountNumber)
	ret0, _ := ret[0].(*money.Money)
	ret1, _ := ret[1].(decimal.Decimal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockMoneyServiceAdapterMockRecorder) GetUserBalance(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockMoneyServiceAdapter)(nil).GetUserBalance), ctx, accountNumber)
}

// PublicGetUserBalance mocks base method.
func (m *MockMoneyServiceAdapter) PublicGetUserBalance(ctx context.Context, accountNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicGetUserBalance", ctx, accountNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicGetUserBalance indicates an expected call of PublicGetUserBalance.
func (mr *MockMoneyServiceAdapterMockRecorder) PublicGetUserBalance(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicGetUserBalance", reflect.TypeOf((*MockMoneyServiceAdapter)(nil).PublicGetUserBalance), ctx, accountNumber)
}

// UpdateUserBalance mocks base method.
func (m *MockMoneyServiceAdapter) UpdateUserBalance(ctx context.Context, reqID, accountNumber string, amount *money.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", ctx, reqID, accountNumber, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockMoneyServiceAdapterMockRecorder) UpdateUserBalance(ctx, reqID, accountNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockMoneyServiceAdapter)(nil).UpdateUserBalance), ctx, reqID, accountNumber, amount)
}

// MockMoneyServiceConsumerAdapter is a mock of MoneyServiceConsumerAdapter interface.
type MockMoneyServiceConsumerAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockMoneyServiceConsumerAdapterMockRecorder
}

// MockMoneyServiceConsumerAdapterMockRecorder is the mock recorder for MockMoneyServiceConsumerAdapter.
type MockMoneyServiceConsumerAdapterMockRecorder struct {
	mock *MockMoneyServiceConsumerAdapter
}

// NewMockMoneyServiceConsumerAdapter creates a new mock instance.
func NewMockMoneyServiceConsumerAdapter(ctrl *gomock.Controller) *MockMoneyServiceConsumerAdapter {
	mock := &MockMoneyServiceConsumerAdapter{ctrl: ctrl}
	mock.recorder = &MockMoneyServiceConsumerAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoneyServiceConsumerAdapter) EXPECT() *MockMoneyServiceConsumerAdapterMockRecorder {
	return m.recorder
}

// HandleTransactionValidation mocks base method.
func (m *MockMoneyServiceConsumerAdapter) HandleTransactionValidation(ctx context.Context, reply types.TransactionValidateInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransactionValidation", ctx, reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransactionValidation indicates an expected call of HandleTransactionValidation.
func (mr *MockMoneyServiceConsumerAdapterMockRecorder) HandleTransactionValidation(ctx, reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransactionValidation", reflect.TypeOf((*MockMoneyServiceConsumerAdapter)(nil).HandleTransactionValidation), ctx, reply)
}
