// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/titikterang/hexagonal-fastcampus-pay/internal/money/core/model"
	types "github.com/titikterang/hexagonal-fastcampus-pay/lib/types"
)

// MockMoneyRepositoryAdapter is a mock of MoneyRepositoryAdapter interface.
type MockMoneyRepositoryAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockMoneyRepositoryAdapterMockRecorder
}

// MockMoneyRepositoryAdapterMockRecorder is the mock recorder for MockMoneyRepositoryAdapter.
type MockMoneyRepositoryAdapterMockRecorder struct {
	mock *MockMoneyRepositoryAdapter
}

// NewMockMoneyRepositoryAdapter creates a new mock instance.
func NewMockMoneyRepositoryAdapter(ctrl *gomock.Controller) *MockMoneyRepositoryAdapter {
	mock := &MockMoneyRepositoryAdapter{ctrl: ctrl}
	mock.recorder = &MockMoneyRepositoryAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoneyRepositoryAdapter) EXPECT() *MockMoneyRepositoryAdapterMockRecorder {
	return m.recorder
}

// AppendCashMovementInfoIntoCache mocks base method.
func (m *MockMoneyRepositoryAdapter) AppendCashMovementInfoIntoCache(ctx context.Context, info model.CashMovementInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendCashMovementInfoIntoCache", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendCashMovementInfoIntoCache indicates an expected call of AppendCashMovementInfoIntoCache.
func (mr *MockMoneyRepositoryAdapterMockRecorder) AppendCashMovementInfoIntoCache(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendCashMovementInfoIntoCache", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).AppendCashMovementInfoIntoCache), ctx, info)
}

// AppendCashMovementIntoDatastore mocks base method.
func (m *MockMoneyRepositoryAdapter) AppendCashMovementIntoDatastore(ctx context.Context, info model.CashMovementInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendCashMovementIntoDatastore", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendCashMovementIntoDatastore indicates an expected call of AppendCashMovementIntoDatastore.
func (mr *MockMoneyRepositoryAdapterMockRecorder) AppendCashMovementIntoDatastore(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendCashMovementIntoDatastore", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).AppendCashMovementIntoDatastore), ctx, info)
}

// ConstructBalanceInfo mocks base method.
func (m *MockMoneyRepositoryAdapter) ConstructBalanceInfo(ctx context.Context, info model.UserCashInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructBalanceInfo", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConstructBalanceInfo indicates an expected call of ConstructBalanceInfo.
func (mr *MockMoneyRepositoryAdapterMockRecorder) ConstructBalanceInfo(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructBalanceInfo", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).ConstructBalanceInfo), ctx, info)
}

// GetBalanceInfoFromDB mocks base method.
func (m *MockMoneyRepositoryAdapter) GetBalanceInfoFromDB(ctx context.Context, accountNo string) (model.UserCashInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceInfoFromDB", ctx, accountNo)
	ret0, _ := ret[0].(model.UserCashInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceInfoFromDB indicates an expected call of GetBalanceInfoFromDB.
func (mr *MockMoneyRepositoryAdapterMockRecorder) GetBalanceInfoFromDB(ctx, accountNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceInfoFromDB", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).GetBalanceInfoFromDB), ctx, accountNo)
}

// GetCashMovementFromCache mocks base method.
func (m *MockMoneyRepositoryAdapter) GetCashMovementFromCache(ctx context.Context, accountNumber string) ([]model.CashMovementInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCashMovementFromCache", ctx, accountNumber)
	ret0, _ := ret[0].([]model.CashMovementInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCashMovementFromCache indicates an expected call of GetCashMovementFromCache.
func (mr *MockMoneyRepositoryAdapterMockRecorder) GetCashMovementFromCache(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCashMovementFromCache", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).GetCashMovementFromCache), ctx, accountNumber)
}

// GetSnapshot mocks base method.
func (m *MockMoneyRepositoryAdapter) GetSnapshot(ctx context.Context, accountNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, accountNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockMoneyRepositoryAdapterMockRecorder) GetSnapshot(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).GetSnapshot), ctx, accountNumber)
}

// PublishMoneyValidationMessageReply mocks base method.
func (m *MockMoneyRepositoryAdapter) PublishMoneyValidationMessageReply(ctx context.Context, info types.TransactionValidateReplyInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMoneyValidationMessageReply", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMoneyValidationMessageReply indicates an expected call of PublishMoneyValidationMessageReply.
func (mr *MockMoneyRepositoryAdapterMockRecorder) PublishMoneyValidationMessageReply(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMoneyValidationMessageReply", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).PublishMoneyValidationMessageReply), ctx, info)
}

// ReqIDExists mocks base method.
func (m *MockMoneyRepositoryAdapter) ReqIDExists(ctx context.Context, accountNumber, reqID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReqIDExists", ctx, accountNumber, reqID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReqIDExists indicates an expected call of ReqIDExists.
func (mr *MockMoneyRepositoryAdapterMockRecorder) ReqIDExists(ctx, accountNumber, reqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqIDExists", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).ReqIDExists), ctx, accountNumber, reqID)
}

// SaveReqID mocks base method.
func (m *MockMoneyRepositoryAdapter) SaveReqID(ctx context.Context, accountNumber, reqID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveReqID", ctx, accountNumber, reqID)
}

// SaveReqID indicates an expected call of SaveReqID.
func (mr *MockMoneyRepositoryAdapterMockRecorder) SaveReqID(ctx, accountNumber, reqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReqID", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).SaveReqID), ctx, accountNumber, reqID)
}

// UpdateSnapshot mocks base method.
func (m *MockMoneyRepositoryAdapter) UpdateSnapshot(ctx context.Context, accountNumber, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", ctx, accountNumber, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockMoneyRepositoryAdapterMockRecorder) UpdateSnapshot(ctx, accountNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockMoneyRepositoryAdapter)(nil).UpdateSnapshot), ctx, accountNumber, amount)
}
