// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
)

// MockKafkaProducerInterface is a mock of KafkaProducerInterface interface.
type MockKafkaProducerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerInterfaceMockRecorder
}

// MockKafkaProducerInterfaceMockRecorder is the mock recorder for MockKafkaProducerInterface.
type MockKafkaProducerInterfaceMockRecorder struct {
	mock *MockKafkaProducerInterface
}

// NewMockKafkaProducerInterface creates a new mock instance.
func NewMockKafkaProducerInterface(ctrl *gomock.Controller) *MockKafkaProducerInterface {
	mock := &MockKafkaProducerInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducerInterface) EXPECT() *MockKafkaProducerInterfaceMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockKafkaProducerInterface) Produce(ctx context.Context, topic string, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, topic, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockKafkaProducerInterfaceMockRecorder) Produce(ctx, topic, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockKafkaProducerInterface)(nil).Produce), ctx, topic, key, value)
}

// ProduceSync mocks base method.
func (m *MockKafkaProducerInterface) ProduceSync(ctx context.Context, records ...*kgo.Record) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range records {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceSync", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceSync indicates an expected call of ProduceSync.
func (mr *MockKafkaProducerInterfaceMockRecorder) ProduceSync(ctx interface{}, records ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, records...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceSync", reflect.TypeOf((*MockKafkaProducerInterface)(nil).ProduceSync), varargs...)
}

// MockKafkaClientInterface is a mock of KafkaClientInterface interface.
type MockKafkaClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaClientInterfaceMockRecorder
}

// MockKafkaClientInterfaceMockRecorder is the mock recorder for MockKafkaClientInterface.
type MockKafkaClientInterfaceMockRecorder struct {
	mock *MockKafkaClientInterface
}

// NewMockKafkaClientInterface creates a new mock instance.
func NewMockKafkaClientInterface(ctrl *gomock.Controller) *MockKafkaClientInterface {
	mock := &MockKafkaClientInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaClientInterface) EXPECT() *MockKafkaClientInterfaceMockRecorder {
	return m.recorder
}

// AllowRebalance mocks base method.
func (m *MockKafkaClientInterface) AllowRebalance() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AllowRebalance")
}

// AllowRebalance indicates an expected call of AllowRebalance.
func (mr *MockKafkaClientInterfaceMockRecorder) AllowRebalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowRebalance", reflect.TypeOf((*MockKafkaClientInterface)(nil).AllowRebalance))
}

// Close mocks base method.
func (m *MockKafkaClientInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKafkaClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaClientInterface)(nil).Close))
}

// CommitRecords mocks base method.
func (m *MockKafkaClientInterface) CommitRecords(ctx context.Context, rs ...*kgo.Record) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range rs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitRecords", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitRecords indicates an expected call of CommitRecords.
func (mr *MockKafkaClientInterfaceMockRecorder) CommitRecords(ctx interface{}, rs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, rs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitRecords", reflect.TypeOf((*MockKafkaClientInterface)(nil).CommitRecords), varargs...)
}

// MarkCommitRecords mocks base method.
func (m *MockKafkaClientInterface) MarkCommitRecords(rs ...*kgo.Record) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range rs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MarkCommitRecords", varargs...)
}

// MarkCommitRecords indicates an expected call of MarkCommitRecords.
func (mr *MockKafkaClientInterfaceMockRecorder) MarkCommitRecords(rs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkCommitRecords", reflect.TypeOf((*MockKafkaClientInterface)(nil).MarkCommitRecords), rs...)
}

// Ping mocks base method.
func (m *MockKafkaClientInterface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockKafkaClientInterfaceMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockKafkaClientInterface)(nil).Ping), ctx)
}

// PollFetches mocks base method.
func (m *MockKafkaClientInterface) PollFetches(ctx context.Context) kgo.Fetches {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollFetches", ctx)
	ret0, _ := ret[0].(kgo.Fetches)
	return ret0
}

// PollFetches indicates an expected call of PollFetches.
func (mr *MockKafkaClientInterfaceMockRecorder) PollFetches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollFetches", reflect.TypeOf((*MockKafkaClientInterface)(nil).PollFetches), ctx)
}

// PollRecords mocks base method.
func (m *MockKafkaClientInterface) PollRecords(ctx context.Context, maxPollRecords int) kgo.Fetches {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollRecords", ctx, maxPollRecords)
	ret0, _ := ret[0].(kgo.Fetches)
	return ret0
}

// PollRecords indicates an expected call of PollRecords.
func (mr *MockKafkaClientInterfaceMockRecorder) PollRecords(ctx, maxPollRecords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollRecords", reflect.TypeOf((*MockKafkaClientInterface)(nil).PollRecords), ctx, maxPollRecords)
}

// ProduceSync mocks base method.
func (m *MockKafkaClientInterface) ProduceSync(ctx context.Context, rs ...*kgo.Record) kgo.ProduceResults {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range rs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceSync", varargs...)
	ret0, _ := ret[0].(kgo.ProduceResults)
	return ret0
}

// ProduceSync indicates an expected call of ProduceSync.
func (mr *MockKafkaClientInterfaceMockRecorder) ProduceSync(ctx interface{}, rs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, rs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceSync", reflect.TypeOf((*MockKafkaClientInterface)(nil).ProduceSync), varargs...)
}
