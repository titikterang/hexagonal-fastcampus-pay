// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: lib/protos/v1/payment/payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MoneyService_GetPaymentStatus_FullMethodName       = "/fastcampus.payment.v1.MoneyService/GetPaymentStatus"
	MoneyService_GetPaymentPrecheckInfo_FullMethodName = "/fastcampus.payment.v1.MoneyService/GetPaymentPrecheckInfo"
	MoneyService_SubmitPayment_FullMethodName          = "/fastcampus.payment.v1.MoneyService/SubmitPayment"
)

// MoneyServiceClient is the client API for MoneyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyServiceClient interface {
	// balance return as string
	// /v1/payment/status?invoice_id=1234
	GetPaymentStatus(ctx context.Context, in *PaymentStatusPayload, opts ...grpc.CallOption) (*PaymentStatusResponse, error)
	// /v1/payment/precheck?account_no=1234
	GetPaymentPrecheckInfo(ctx context.Context, in *PaymentPrecheckPayload, opts ...grpc.CallOption) (*PaymentPrecheckResponse, error)
	// update user balance
	SubmitPayment(ctx context.Context, in *SubmitPaymentPayload, opts ...grpc.CallOption) (*SubmitPaymentResponse, error)
}

type moneyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyServiceClient(cc grpc.ClientConnInterface) MoneyServiceClient {
	return &moneyServiceClient{cc}
}

func (c *moneyServiceClient) GetPaymentStatus(ctx context.Context, in *PaymentStatusPayload, opts ...grpc.CallOption) (*PaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentStatusResponse)
	err := c.cc.Invoke(ctx, MoneyService_GetPaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyServiceClient) GetPaymentPrecheckInfo(ctx context.Context, in *PaymentPrecheckPayload, opts ...grpc.CallOption) (*PaymentPrecheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentPrecheckResponse)
	err := c.cc.Invoke(ctx, MoneyService_GetPaymentPrecheckInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyServiceClient) SubmitPayment(ctx context.Context, in *SubmitPaymentPayload, opts ...grpc.CallOption) (*SubmitPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitPaymentResponse)
	err := c.cc.Invoke(ctx, MoneyService_SubmitPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyServiceServer is the server API for MoneyService service.
// All implementations must embed UnimplementedMoneyServiceServer
// for forward compatibility
type MoneyServiceServer interface {
	// balance return as string
	// /v1/payment/status?invoice_id=1234
	GetPaymentStatus(context.Context, *PaymentStatusPayload) (*PaymentStatusResponse, error)
	// /v1/payment/precheck?account_no=1234
	GetPaymentPrecheckInfo(context.Context, *PaymentPrecheckPayload) (*PaymentPrecheckResponse, error)
	// update user balance
	SubmitPayment(context.Context, *SubmitPaymentPayload) (*SubmitPaymentResponse, error)
	mustEmbedUnimplementedMoneyServiceServer()
}

// UnimplementedMoneyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyServiceServer struct {
}

func (UnimplementedMoneyServiceServer) GetPaymentStatus(context.Context, *PaymentStatusPayload) (*PaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStatus not implemented")
}
func (UnimplementedMoneyServiceServer) GetPaymentPrecheckInfo(context.Context, *PaymentPrecheckPayload) (*PaymentPrecheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentPrecheckInfo not implemented")
}
func (UnimplementedMoneyServiceServer) SubmitPayment(context.Context, *SubmitPaymentPayload) (*SubmitPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPayment not implemented")
}
func (UnimplementedMoneyServiceServer) mustEmbedUnimplementedMoneyServiceServer() {}

// UnsafeMoneyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyServiceServer will
// result in compilation errors.
type UnsafeMoneyServiceServer interface {
	mustEmbedUnimplementedMoneyServiceServer()
}

func RegisterMoneyServiceServer(s grpc.ServiceRegistrar, srv MoneyServiceServer) {
	s.RegisterService(&MoneyService_ServiceDesc, srv)
}

func _MoneyService_GetPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentStatusPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServiceServer).GetPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyService_GetPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServiceServer).GetPaymentStatus(ctx, req.(*PaymentStatusPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyService_GetPaymentPrecheckInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPrecheckPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServiceServer).GetPaymentPrecheckInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyService_GetPaymentPrecheckInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServiceServer).GetPaymentPrecheckInfo(ctx, req.(*PaymentPrecheckPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyService_SubmitPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPaymentPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServiceServer).SubmitPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyService_SubmitPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServiceServer).SubmitPayment(ctx, req.(*SubmitPaymentPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyService_ServiceDesc is the grpc.ServiceDesc for MoneyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fastcampus.payment.v1.MoneyService",
	HandlerType: (*MoneyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentStatus",
			Handler:    _MoneyService_GetPaymentStatus_Handler,
		},
		{
			MethodName: "GetPaymentPrecheckInfo",
			Handler:    _MoneyService_GetPaymentPrecheckInfo_Handler,
		},
		{
			MethodName: "SubmitPayment",
			Handler:    _MoneyService_SubmitPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/protos/v1/payment/payment.proto",
}
