// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: lib/protos/v1/payment/payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PaymentService_GetPaymentStatus_FullMethodName       = "/fastcampus.payment.v1.PaymentService/GetPaymentStatus"
	PaymentService_GetPaymentPrecheckInfo_FullMethodName = "/fastcampus.payment.v1.PaymentService/GetPaymentPrecheckInfo"
	PaymentService_SubmitPayment_FullMethodName          = "/fastcampus.payment.v1.PaymentService/SubmitPayment"
	PaymentService_GetPaymentInfoByID_FullMethodName     = "/fastcampus.payment.v1.PaymentService/GetPaymentInfoByID"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// balance return as string
	// /v1/payment/status?invoice_id=1234
	GetPaymentStatus(ctx context.Context, in *PaymentStatusPayload, opts ...grpc.CallOption) (*PaymentStatusResponse, error)
	// /v1/payment/precheck?account_no=1234
	GetPaymentPrecheckInfo(ctx context.Context, in *PaymentPrecheckPayload, opts ...grpc.CallOption) (*PaymentPrecheckResponse, error)
	// update user balance
	SubmitPayment(ctx context.Context, in *SubmitPaymentPayload, opts ...grpc.CallOption) (*SubmitPaymentResponse, error)
	GetPaymentInfoByID(ctx context.Context, in *PaymentInfoPayload, opts ...grpc.CallOption) (*PaymentInfoResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) GetPaymentStatus(ctx context.Context, in *PaymentStatusPayload, opts ...grpc.CallOption) (*PaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentStatusResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentPrecheckInfo(ctx context.Context, in *PaymentPrecheckPayload, opts ...grpc.CallOption) (*PaymentPrecheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentPrecheckResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentPrecheckInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SubmitPayment(ctx context.Context, in *SubmitPaymentPayload, opts ...grpc.CallOption) (*SubmitPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_SubmitPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentInfoByID(ctx context.Context, in *PaymentInfoPayload, opts ...grpc.CallOption) (*PaymentInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentInfoResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentInfoByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	// balance return as string
	// /v1/payment/status?invoice_id=1234
	GetPaymentStatus(context.Context, *PaymentStatusPayload) (*PaymentStatusResponse, error)
	// /v1/payment/precheck?account_no=1234
	GetPaymentPrecheckInfo(context.Context, *PaymentPrecheckPayload) (*PaymentPrecheckResponse, error)
	// update user balance
	SubmitPayment(context.Context, *SubmitPaymentPayload) (*SubmitPaymentResponse, error)
	GetPaymentInfoByID(context.Context, *PaymentInfoPayload) (*PaymentInfoResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) GetPaymentStatus(context.Context, *PaymentStatusPayload) (*PaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStatus not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentPrecheckInfo(context.Context, *PaymentPrecheckPayload) (*PaymentPrecheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentPrecheckInfo not implemented")
}
func (UnimplementedPaymentServiceServer) SubmitPayment(context.Context, *SubmitPaymentPayload) (*SubmitPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentInfoByID(context.Context, *PaymentInfoPayload) (*PaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentInfoByID not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_GetPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentStatusPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentStatus(ctx, req.(*PaymentStatusPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentPrecheckInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPrecheckPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentPrecheckInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentPrecheckInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentPrecheckInfo(ctx, req.(*PaymentPrecheckPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SubmitPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPaymentPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SubmitPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_SubmitPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SubmitPayment(ctx, req.(*SubmitPaymentPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentInfoPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentInfoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentInfoByID(ctx, req.(*PaymentInfoPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fastcampus.payment.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentStatus",
			Handler:    _PaymentService_GetPaymentStatus_Handler,
		},
		{
			MethodName: "GetPaymentPrecheckInfo",
			Handler:    _PaymentService_GetPaymentPrecheckInfo_Handler,
		},
		{
			MethodName: "SubmitPayment",
			Handler:    _PaymentService_SubmitPayment_Handler,
		},
		{
			MethodName: "GetPaymentInfoByID",
			Handler:    _PaymentService_GetPaymentInfoByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/protos/v1/payment/payment.proto",
}
