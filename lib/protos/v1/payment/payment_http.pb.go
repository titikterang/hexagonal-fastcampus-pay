// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: lib/protos/v1/payment/payment.proto

package payment

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMoneyServiceGetPaymentStatus = "/fastcampus.payment.v1.MoneyService/GetPaymentStatus"
const OperationMoneyServiceSubmitPayment = "/fastcampus.payment.v1.MoneyService/SubmitPayment"

type MoneyServiceHTTPServer interface {
	// GetPaymentStatus balance return as string
	// /v1/payment/status?invoice_id=1234
	GetPaymentStatus(context.Context, *PaymentStatusPayload) (*PaymentStatusResponse, error)
	// SubmitPayment update user balance
	SubmitPayment(context.Context, *SubmitPaymentPayload) (*SubmitPaymentResponse, error)
}

func RegisterMoneyServiceHTTPServer(s *http.Server, srv MoneyServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/payment/status", _MoneyService_GetPaymentStatus0_HTTP_Handler(srv))
	r.POST("/v1/payment/submit", _MoneyService_SubmitPayment0_HTTP_Handler(srv))
}

func _MoneyService_GetPaymentStatus0_HTTP_Handler(srv MoneyServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PaymentStatusPayload
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMoneyServiceGetPaymentStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentStatus(ctx, req.(*PaymentStatusPayload))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PaymentStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _MoneyService_SubmitPayment0_HTTP_Handler(srv MoneyServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitPaymentPayload
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMoneyServiceSubmitPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitPayment(ctx, req.(*SubmitPaymentPayload))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitPaymentResponse)
		return ctx.Result(200, reply)
	}
}

type MoneyServiceHTTPClient interface {
	GetPaymentStatus(ctx context.Context, req *PaymentStatusPayload, opts ...http.CallOption) (rsp *PaymentStatusResponse, err error)
	SubmitPayment(ctx context.Context, req *SubmitPaymentPayload, opts ...http.CallOption) (rsp *SubmitPaymentResponse, err error)
}

type MoneyServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMoneyServiceHTTPClient(client *http.Client) MoneyServiceHTTPClient {
	return &MoneyServiceHTTPClientImpl{client}
}

func (c *MoneyServiceHTTPClientImpl) GetPaymentStatus(ctx context.Context, in *PaymentStatusPayload, opts ...http.CallOption) (*PaymentStatusResponse, error) {
	var out PaymentStatusResponse
	pattern := "/v1/payment/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMoneyServiceGetPaymentStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MoneyServiceHTTPClientImpl) SubmitPayment(ctx context.Context, in *SubmitPaymentPayload, opts ...http.CallOption) (*SubmitPaymentResponse, error) {
	var out SubmitPaymentResponse
	pattern := "/v1/payment/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMoneyServiceSubmitPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
