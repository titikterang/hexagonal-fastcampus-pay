// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: lib/protos/v1/transfer/transfer.proto

package transfer

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBankingServiceGetTransferHistory = "/fastcampus.transfer.v1.BankingService/GetTransferHistory"
const OperationBankingServiceSubmitTransferBalance = "/fastcampus.transfer.v1.BankingService/SubmitTransferBalance"

type BankingServiceHTTPServer interface {
	GetTransferHistory(context.Context, *TransferHistoryRequest) (*TransferHistoryResponse, error)
	// SubmitTransferBalance Transfer Balance Antar Account
	SubmitTransferBalance(context.Context, *TransferBalanceRequest) (*TransferBalanceResponse, error)
}

func RegisterBankingServiceHTTPServer(s *http.Server, srv BankingServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/transfer/balance", _BankingService_SubmitTransferBalance0_HTTP_Handler(srv))
	r.GET("/v1/transfer/history", _BankingService_GetTransferHistory0_HTTP_Handler(srv))
}

func _BankingService_SubmitTransferBalance0_HTTP_Handler(srv BankingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransferBalanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBankingServiceSubmitTransferBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitTransferBalance(ctx, req.(*TransferBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransferBalanceResponse)
		return ctx.Result(200, reply)
	}
}

func _BankingService_GetTransferHistory0_HTTP_Handler(srv BankingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransferHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBankingServiceGetTransferHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransferHistory(ctx, req.(*TransferHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransferHistoryResponse)
		return ctx.Result(200, reply)
	}
}

type BankingServiceHTTPClient interface {
	GetTransferHistory(ctx context.Context, req *TransferHistoryRequest, opts ...http.CallOption) (rsp *TransferHistoryResponse, err error)
	SubmitTransferBalance(ctx context.Context, req *TransferBalanceRequest, opts ...http.CallOption) (rsp *TransferBalanceResponse, err error)
}

type BankingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBankingServiceHTTPClient(client *http.Client) BankingServiceHTTPClient {
	return &BankingServiceHTTPClientImpl{client}
}

func (c *BankingServiceHTTPClientImpl) GetTransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...http.CallOption) (*TransferHistoryResponse, error) {
	var out TransferHistoryResponse
	pattern := "/v1/transfer/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBankingServiceGetTransferHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BankingServiceHTTPClientImpl) SubmitTransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...http.CallOption) (*TransferBalanceResponse, error) {
	var out TransferBalanceResponse
	pattern := "/v1/transfer/balance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBankingServiceSubmitTransferBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
