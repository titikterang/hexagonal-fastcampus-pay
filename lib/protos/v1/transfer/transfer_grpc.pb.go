// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.1
// source: lib/protos/v1/transfer/transfer.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TransferService_GetTransferInfoByID_FullMethodName   = "/fastcampus.transfer.v1.TransferService/GetTransferInfoByID"
	TransferService_SubmitTransferBalance_FullMethodName = "/fastcampus.transfer.v1.TransferService/SubmitTransferBalance"
	TransferService_GetTransferHistory_FullMethodName    = "/fastcampus.transfer.v1.TransferService/GetTransferHistory"
)

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	GetTransferInfoByID(ctx context.Context, in *TransferInfoPayload, opts ...grpc.CallOption) (*TransferInfoResponse, error)
	// Transfer Balance Antar Account
	SubmitTransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...grpc.CallOption) (*TransferBalanceResponse, error)
	GetTransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...grpc.CallOption) (*TransferHistoryResponse, error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) GetTransferInfoByID(ctx context.Context, in *TransferInfoPayload, opts ...grpc.CallOption) (*TransferInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferInfoResponse)
	err := c.cc.Invoke(ctx, TransferService_GetTransferInfoByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) SubmitTransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...grpc.CallOption) (*TransferBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferBalanceResponse)
	err := c.cc.Invoke(ctx, TransferService_SubmitTransferBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetTransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...grpc.CallOption) (*TransferHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferHistoryResponse)
	err := c.cc.Invoke(ctx, TransferService_GetTransferHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServiceServer is the server API for TransferService service.
// All implementations must embed UnimplementedTransferServiceServer
// for forward compatibility
type TransferServiceServer interface {
	GetTransferInfoByID(context.Context, *TransferInfoPayload) (*TransferInfoResponse, error)
	// Transfer Balance Antar Account
	SubmitTransferBalance(context.Context, *TransferBalanceRequest) (*TransferBalanceResponse, error)
	GetTransferHistory(context.Context, *TransferHistoryRequest) (*TransferHistoryResponse, error)
	mustEmbedUnimplementedTransferServiceServer()
}

// UnimplementedTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransferServiceServer struct {
}

func (UnimplementedTransferServiceServer) GetTransferInfoByID(context.Context, *TransferInfoPayload) (*TransferInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferInfoByID not implemented")
}
func (UnimplementedTransferServiceServer) SubmitTransferBalance(context.Context, *TransferBalanceRequest) (*TransferBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransferBalance not implemented")
}
func (UnimplementedTransferServiceServer) GetTransferHistory(context.Context, *TransferHistoryRequest) (*TransferHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferHistory not implemented")
}
func (UnimplementedTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_GetTransferInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInfoPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetTransferInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_GetTransferInfoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetTransferInfoByID(ctx, req.(*TransferInfoPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_SubmitTransferBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).SubmitTransferBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_SubmitTransferBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).SubmitTransferBalance(ctx, req.(*TransferBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetTransferHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetTransferHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_GetTransferHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetTransferHistory(ctx, req.(*TransferHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fastcampus.transfer.v1.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransferInfoByID",
			Handler:    _TransferService_GetTransferInfoByID_Handler,
		},
		{
			MethodName: "SubmitTransferBalance",
			Handler:    _TransferService_SubmitTransferBalance_Handler,
		},
		{
			MethodName: "GetTransferHistory",
			Handler:    _TransferService_GetTransferHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/protos/v1/transfer/transfer.proto",
}
