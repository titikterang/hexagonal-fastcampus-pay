// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: lib/protos/v1/banking/banking.proto

package banking

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBankingServiceSubmitDeposit = "/fastcampus.banking.v1.BankingService/SubmitDeposit"
const OperationBankingServiceSubmitPayment = "/fastcampus.banking.v1.BankingService/SubmitPayment"
const OperationBankingServiceSubmitTransfer = "/fastcampus.banking.v1.BankingService/SubmitTransfer"

type BankingServiceHTTPServer interface {
	// SubmitDeposit Payment Antar Bank
	SubmitDeposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// SubmitPayment Payment Antar Bank
	SubmitPayment(context.Context, *BankPaymentRequest) (*BankPaymentResponse, error)
	// SubmitTransfer Transfer Antar Bank
	SubmitTransfer(context.Context, *BankTransferRequest) (*BankTransferResponse, error)
}

func RegisterBankingServiceHTTPServer(s *http.Server, srv BankingServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/banking/transfer", _BankingService_SubmitTransfer0_HTTP_Handler(srv))
	r.POST("/v1/banking/payment", _BankingService_SubmitPayment1_HTTP_Handler(srv))
	r.POST("/v1/banking/deposit", _BankingService_SubmitDeposit0_HTTP_Handler(srv))
}

func _BankingService_SubmitTransfer0_HTTP_Handler(srv BankingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BankTransferRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBankingServiceSubmitTransfer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitTransfer(ctx, req.(*BankTransferRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BankTransferResponse)
		return ctx.Result(200, reply)
	}
}

func _BankingService_SubmitPayment1_HTTP_Handler(srv BankingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BankPaymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBankingServiceSubmitPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitPayment(ctx, req.(*BankPaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BankPaymentResponse)
		return ctx.Result(200, reply)
	}
}

func _BankingService_SubmitDeposit0_HTTP_Handler(srv BankingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBankingServiceSubmitDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitDeposit(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositResponse)
		return ctx.Result(200, reply)
	}
}

type BankingServiceHTTPClient interface {
	SubmitDeposit(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositResponse, err error)
	SubmitPayment(ctx context.Context, req *BankPaymentRequest, opts ...http.CallOption) (rsp *BankPaymentResponse, err error)
	SubmitTransfer(ctx context.Context, req *BankTransferRequest, opts ...http.CallOption) (rsp *BankTransferResponse, err error)
}

type BankingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBankingServiceHTTPClient(client *http.Client) BankingServiceHTTPClient {
	return &BankingServiceHTTPClientImpl{client}
}

func (c *BankingServiceHTTPClientImpl) SubmitDeposit(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositResponse, error) {
	var out DepositResponse
	pattern := "/v1/banking/deposit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBankingServiceSubmitDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BankingServiceHTTPClientImpl) SubmitPayment(ctx context.Context, in *BankPaymentRequest, opts ...http.CallOption) (*BankPaymentResponse, error) {
	var out BankPaymentResponse
	pattern := "/v1/banking/payment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBankingServiceSubmitPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BankingServiceHTTPClientImpl) SubmitTransfer(ctx context.Context, in *BankTransferRequest, opts ...http.CallOption) (*BankTransferResponse, error) {
	var out BankTransferResponse
	pattern := "/v1/banking/transfer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBankingServiceSubmitTransfer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
